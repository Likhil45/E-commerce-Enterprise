syntax = "proto3";



option go_package = "./protobuf;protobuf";
// User Service
service UserService {
    rpc RegisterUser (RegisterUserRequest) returns (UserResponse);
    rpc AuthenticateUser (AuthenticateUserRequest) returns (AuthResponse);
    rpc GetUser (GetUserRequest) returns (UserResponse);
    rpc GetUserPaymentDetails (GetUserRequest) returns (UserPaymentResponse);
}

message RegisterUserRequest {
    string username = 1;
    string email = 2;
    string password = 3;
    string user_id = 4;
    PaymentDetails payment_details=5;
}

message AuthenticateUserRequest {
    string username = 1;
    string password = 2;
}

message GetUserRequest {
    string user_id = 1;
}

message UserResponse {
    string user_id = 1;
    string username = 2;
    string email = 3;
    PaymentDetails payment = 4;
}

message AuthResponse {
    string token = 1;
}

message PaymentDetails {
    uint32 payment_id = 1;
    string payment_method = 2;  // "card", "paypal", "crypto", etc.
    string card_number = 3;     // Masked card number (e.g., "**** **** **** 1234")
    string expiry_date = 4;     // Format: "MM/YY"
}

message UserPaymentResponse {
    bool has_payment_details = 1;
    PaymentDetails payment = 2;
}


// Product Service
service ProductService {
    rpc CreateProduct (ProductRequest) returns (ProductResponse);
    rpc GetProduct (ProductIDRequest) returns (ProductResponse);
    rpc ListProducts (Empty) returns (ProductListResponse);
    rpc UpdateProduct (ProductRequest) returns (ProductResponse);
    rpc DeleteProduct (ProductIDRequest) returns (Empty);
}

message ProductRequest {
    uint32 product_id = 1;
    string name = 2;
    string description = 3;
    float price = 4;
    uint32 quantity=5;

}

message ProductIDRequest {
    uint32 product_id = 1;
}

message ProductResponse {
    uint32 product_id = 1;
    string name = 2;
    string description = 3;
    float price = 4;
    uint32 quantity=5;
}

message ProductListResponse {
    repeated ProductResponse products = 1;
}

message Empty {}

// Inventory Service
service InventoryService {
    rpc TrackStock (StockRequest) returns (StockResponse);
    rpc UpdateStock (StockUpdateRequest) returns (StockResponse);
    rpc GetStock (StockRequest) returns (StockResponse);
}

message StockRequest {
    uint32 product_id = 1;
}

message StockUpdateRequest {
    uint32 product_id = 1;
    uint32 quantity = 2;

}

message StockResponse {
    uint32 product_id = 1;
    uint32 quantity = 2;
    string status = 3;
}



// Order Service
service OrderService {
    rpc CreateOrder (OrderRequest) returns (OrderResponse);
    rpc GetOrder (OrderIDRequest) returns (OrderResponse);
    rpc ListOrders (Empty) returns (OrderListResponse);
    rpc UpdateOrder (OrderRequest) returns (OrderResponse);
    rpc DeleteOrder (OrderIDRequest) returns (Empty);
}

message OrderRequest {
    uint32 order_id = 1;
    string user_id = 2;
    repeated OrderItem items = 3;
    float total_amount = 4;
}

message OrderIDRequest {
    uint32 order_id = 1;
}

message OrderResponse {
    uint32 order_id = 1;
    string user_id = 2;
    repeated OrderItem items = 3;
    float total_amount = 4;
}

message OrderItem {
    uint32 product_id = 1;
    uint32 quantity = 2;
    float price = 3;
}

message OrderListResponse {
    repeated OrderResponse orders = 1;
}

// Payment Service
service PaymentService {
    rpc ProcessPayment (PaymentRequest) returns (PaymentResponse);
}

message PaymentRequest {
    uint32 order_id = 1;
    float amount = 2;
    string method = 3;
    string user_id=4;
}

message PaymentResponse {
    uint32 payment_id = 1;
    uint32 order_id = 2;
    float amount = 3;
    string status = 4;
    string user_id=5;
}

// Notification Service
service NotificationService {
    rpc SendNotification (NotificationRequest) returns (NotificationResponse);
}

message NotificationRequest {
    string user_id = 1;
    string message = 2;
}

message NotificationResponse {
    string status = 1;
}

// Audit & Logging Service
service AuditService {
    rpc LogEvent (LogRequest) returns (LogResponse);
    rpc GetLogs (LogRequest) returns (LogListResponse);
}

message LogRequest {
    string event = 1;
    string description = 2;
}

message LogResponse {
    string status = 1;
}

message LogListResponse {
    repeated LogRequest logs = 1;
}

// Order Tracking & Search Service
service OrderTrackingService {
    rpc TrackOrder (OrderTrackingRequest) returns (OrderTrackingResponse);
    rpc SearchOrders (OrderSearchRequest) returns (OrderSearchResponse);
}

message OrderTrackingRequest {
    uint32 order_id = 1;
}

message OrderTrackingResponse {
    uint32 order_id = 1;
    repeated OrderEvent events = 2;
}

message OrderEvent {
    string event = 1;
}

message OrderSearchRequest {
    string user_id = 1;
    uint32 product_id = 2;
    string status = 5;
}

message OrderSearchResponse {
    repeated OrderTrackingResponse orders = 1;
}

//DB
service DatabaseService {
    rpc GetStock (StockRequest) returns (StockResponse);
    rpc UpdateStock (StockUpdateRequest) returns (StockResponse);
}



//Kafka

service KafkaProducerService {
    rpc PublishMessage (PublishRequest) returns (PublishResponse);
}

message PublishRequest {
    string topic = 1;       // Topic name (e.g., "orders", "payments")
    string event_type = 2;  // Event type (e.g., "OrderCreated", "PaymentProcessed")
    string message = 3;     // JSON message payload
}

message PublishResponse {
    string status = 1;
}


//Redis
service RedisService {
    rpc SetData (SetRequest) returns (SetResponse);
    rpc GetData (GetRequest) returns (GetResponse);
}

message SetRequest {
    string key = 1;
    string value = 2;
    uint32 expiration = 3;
}

message SetResponse {
    string status = 1;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    string value = 1;
}
