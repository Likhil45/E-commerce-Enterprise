name: Build & Push Microservices and Deploy to EC2

on:
  push:
    branches: [main]
    paths:
      - '**/Dockerfile'
      - '**/go.mod'
      - '**/go.sum'
      - '**/*.go'
      - '.github/workflows/**'
      - 'docker-compose.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - write-db-service
          - producer-service
          - product-service
          - consumer-service
          - payment-service
          - gateway
          - inventory-service
          - notification-service
          - redis-service
          - order-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set lowercase IMAGE_OWNER
      id: prep
      run: echo "IMAGE_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

    - name: Log in to GHCR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build & Push ${{ matrix.service }}
      run: |
        docker build -t $REGISTRY/${IMAGE_OWNER_LC}/${{ matrix.service }}:latest \
          -f ${{ matrix.service }}/Dockerfile .
        docker push $REGISTRY/${IMAGE_OWNER_LC}/${{ matrix.service }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production # Optional: Link to a GitHub environment for deployment protection rules

    env:
      IMAGE_OWNER_LC: ${{ github.repository_owner_lc |lower }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      SMTP_MAIL: ${{ secrets.SMTP_MAIL }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SMTP_SERVICE: ${{ secrets.SMTP_SERVICE }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      GF_SECURITY_ADMIN_USER: ${{ secrets.GRAFANA_ADMIN_USER }}
      GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          APP_DIR="/home/${{ secrets.EC2_USER }}/E-commerce-Enterprise"

          echo "Navigating to $APP_DIR"
          mkdir -p $APP_DIR
          cd $APP_DIR

          echo "Pulling latest code from GitHub..."
          if [ ! -d ".git" ]; then
            # FIX: Corrected git clone URL syntax
            git clone https://github.com/${{ github.repository }}.git .
          else
            git pull origin main
          fi

          echo "Logging into GHCR on EC2 instance..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          echo "Setting environment variables for docker-compose..."
          export IMAGE_OWNER_LC="${{ env.IMAGE_OWNER_LC }}"
          export POSTGRES_USER="${{ env.POSTGRES_USER }}"
          export POSTGRES_PASSWORD="${{ env.POSTGRES_PASSWORD }}"
          export POSTGRES_DB="${{ env.POSTGRES_DB }}"
          export JWT_SECRET="${{ env.JWT_SECRET }}"
          export STRIPE_SECRET_KEY="${{ env.STRIPE_SECRET_KEY }}"
          export CLOUDINARY_CLOUD_NAME="${{ env.CLOUDINARY_CLOUD_NAME }}"
          export CLOUDINARY_API_KEY="${{ env.CLOUDINARY_API_KEY }}"
          export CLOUDINARY_API_SECRET="${{ env.CLOUDINARY_API_SECRET }}"
          export SMTP_MAIL="${{ env.SMTP_MAIL }}"
          export SMTP_PASSWORD="${{ env.SMTP_PASSWORD }}"
          export SMTP_SERVICE="${{ env.SMTP_SERVICE }}"
          export SMTP_HOST="${{ env.SMTP_HOST }}"
          export SMTP_PORT="${{ env.SMTP_PORT }}"
          export REDIS_HOST="${{ env.REDIS_HOST }}"
          export REDIS_PORT="${{ env.REDIS_PORT }}"
          export GF_SECURITY_ADMIN_USER="${{ env.GF_SECURITY_ADMIN_USER }}"
          export GF_SECURITY_ADMIN_PASSWORD="${{ env.GF_SECURITY_ADMIN_PASSWORD }}"

          echo "Stopping and removing existing Docker containers..."
          docker-compose down || true

          echo "Pulling latest Docker images..."
          docker-compose pull

          echo "Starting Docker containers with docker-compose..."
          docker-compose up -d --remove-orphans --force-recreate

          echo "Deployment complete!"
